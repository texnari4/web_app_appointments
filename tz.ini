1 Страница записи правки:
- после подтверждения записи присылать клиенту в телеграм уведомление с деталями записи
- присылать клиенту уведомление о записи за день до визита и за 2 часа до визита
- на странице записи добавить кнопку У меня не получается записаться, свяжитесь со мной. При отправке формы присылать уведомление администратору в телеграм
- Сделать Интер интерфейс мастер Хостес
- выбор временного слота из ленты для записи клиента
- ввести возможность добавить клиента из списка контактов в телефоне
- ввести в встроенный список клиентов с возможностью выбора из этого списка клиента для записи
- добавить вид с календарем
- в календаре подсвечивать дни в которых есть запись
- ввести ограничения возможности записаться за то время сколько длится оказываемая услуга
- в виде с календарем, подсвечивать рабочие дни


Давай разработаем проект (альтернативf YCLIENTS) для записи клиентов для салона красоты. 
Ключевые моменты проекта: 
1) Все модули приложения, иконки шрифты и т.п. должны быть выполнены в дизайн коде apple
2) нам необходимо разработать 3 модуля, 1 для клиентов (непосредственно запись), 2 для мастеров, 3 панель администратора 
3) Модуль для клиентов должен начинаться с предоставления контактов, далее выбор услуги из списка, далее выбор мастера, далее выбор дня в виде гугл календаря на месяц (дни не доступные для записи должны быть серыми (не активными), а доступные выделены цветом), далее выбор свободного слота с шагом в 30 минут, далее кнопка подтверждения записи 
4) Модуль для мастера должен иметь следующие разделы: 
"Журнал" - в основной части экрана вид с лентой записи на день, в нижней части 7 дней недели с возможностью выбора дня для просмотра записи, а также подтвержение записи (при нажатии на запись открывается карточка записи с возможностью позвонить клиенту, написать клиенту, отменить запись, перенести запись, изменить продолжительность записи) 
"График" - в виде гугл календаря с подсвеченными рабочими днями (расписанием мастера)
"Клиенты" - список клиентов с возможностью поиска по имени и телефону, при выборе клиента открывается карточка клиента с историей посещений и возможностью позвонить или написать клиенту
"Уведомления" - список уведомлений о новых записях, отменах и изменениях
"Еще" - настройки профиля мастера (имя, фото, специальности, описание, расписание работы, набор услуг)
5) Панель администратора должна иметь следующие разделы:
"Мастера" - список мастеров с возможностью добавления, удаления и редактирования мастеров (имя, специальности, фото, описание, расписание работы, права на редактирование в модуле мастер) 
"Услуги" - список услуг с возможностью добавления, удаления и редактирования услуг (название, описание, цена, длительность)
"Записи" - список всех записей с возмож     ностью фильтрации по дате, мастеру, клиенту и услуге
"Клиенты" - список всех клиентов с возможностью поиска и просмотра карточки клиента
"Отчеты" - генерация отчетов по записям, доходам и популярным услугам за выбранный период
"Настройки" - общие настройки проекта (например, рабочие часы по умолчанию, шаг записи, интеграции с внешними сервисами)
1) я использую инфраструктуру railway, файловую базу , telegram mini app для взаимодействия с клиентами мастерами и администратором
6) База данных должна содержать таблицы для клиентов, мастеров, услуг, записей, список клиентов за все время, а также необходимые связи между ними
7) Весь проект должен быть реализован с использованием best practices для обеспечения безопасности, производительности и удобства использования
8) Необходимо предусмотреть возможность масштабирования проекта в будущем, например, добавление новых услуг, мастеров, интеграция с другими платформами
9) Важно предусмотреть возможность отправки уведомлений клиентам и мастерам о предстоящих записях, изменениях и отменах через телеграм бота
10) Необходимо разработать систему резервного копирования базы данных и восстановления данных в случае сбоев с помощью google sheets
11) Весь код должен быть хорошо документирован, чтобы облегчить дальнейшую поддержку и развитие проекта
13) Важно предусмотреть возможность анализа данных для улучшения сервиса, например, анализ популярности услуг, активности клиентов и эффективности работы мастеров
16) Необходимо предусмотреть возможность проведения маркетинговых кампаний, например, рассылка акций и специальных предложений клиентам через телеграм бота
17) Важно предусмотреть возможность интеграции с социальными сетями для привлечения новых клиентов и повышения узнаваемости бренда
18) Необходимо разработать систему лояльности для постоянных клиентов, например, накопительные скидки или бонусные баллы
19) Весь проект должен быть реализован с учетом современных тенденций в области UX/UI дизайна для обеспечения удобства использования и привлекательного внешнего вида
20) Необходимо предусмотреть возможность проведения A/B тестирования для оптимизации различных аспектов проекта, например, интерфейса пользователя или маркетинговых стратегий
21) Важно предусмотреть возможность интеграции с системами аналитики для отслеживания поведения пользователей и эффективности различных функций проекта

Подготовь проект к деплою и упаку в архив, собери проект учитывая best practice решения
Импорт данных в базу данных предусматривает только ручной ввод. Давай сделаем временный файл с тестовыми данными для наполнения и импортируем его в базу данных PostgreSQL. 
Вот список уже заданных переменных в railway:

RAILWAY_PUBLIC_DOMAIN
RAILWAY_PRIVATE_DOMAIN
RAILWAY_PROJECT_NAME
RAILWAY_ENVIRONMENT_NAME
RAILWAY_SERVICE_NAME
RAILWAY_PROJECT_ID
RAILWAY_ENVIRONMENT_ID
RAILWAY_SERVICE_ID

ADMIN_USER_IDS
DATABASE_URL
GOOGLE_SERVICE_ACCOUNT_JSON
GOOGLE_SHEET_ID
GOOGLE_SHEETS_BACKUP_SPREADSHEET_ID
NODE_ENV
PGSSLMODE
PORT
PUBLIC_BASE_URL
RAILWAY_URL
SLOT_STEP_MIN
TELEGRAM_BOT_TOKEN



Спринт 1 (MVP ядро)
	•	CRUD услуг (базовый прайс).
	•	Запись клиента: выбор услуги, слот 30 мин, подтверждение.
	•	Telegram-уведомления: клиенту и мастеру.
	•	Простая админка (услуги).
	•	Мини-дизайн по Apple-гайдам.

⸻

Спринт 2 (Модуль мастера, часть 1)
	•	Журнал дня: список записей, карточка записи (позвонить/написать/отменить).
	•	График: базовое расписание (рабочие дни/выходные).
	•	Клиенты: список + карточка с историей посещений.
	•	Уведомления: новые записи / отмены.

⸻

Спринт 3 (Модуль администратора, часть 1)
	•	Мастера: список, добавление, редактирование, права.
	•	Услуги: CRUD с расширенными полями.
	•	Записи: глобальный список + фильтры.
	•	Базовые настройки проекта (рабочие часы по умолчанию, шаг записи).

⸻

Спринт 4 (Усиление мастера и клиента)
	•	Мастер: перенос/изменение длительности записи.
	•	Клиент: полноценный календарь «как Google Calendar» (серые недоступные дни, активные подсвечены).
	•	Улучшение уведомлений: подтверждение/напоминания за X часов.
	•	Базовый журнал действий (audit log).

⸻

Спринт 5 (Отчёты и аналитика)
	•	Отчёты: доходы по мастерам, популярность услуг, активность клиентов.
	•	Экспорт данных в Google Sheets вручную.
	•	Начало интеграции событий (счётчики, метрики).
	•	Мини-A/B тесты (например, форма выбора слота).

⸻

Спринт 6 (Бэкапы и интеграции)
	•	Авто-бэкап БД → Google Sheets (ежедневно).
	•	Восстановление каталога из Google Sheets.
	•	Интеграции соцсетей (ссылки, шаринг).
	•	Улучшенные меры безопасности (шифрование персональных данных, RBAC).

⸻

Спринт 7 (Лояльность и маркетинг)
	•	Система лояльности (накопительные баллы, скидки).
	•	Маркетинговые кампании: сегментация + рассылка через Telegram.
	•	Админ-интерфейс для кампаний.

⸻

Спринт 8 (Углублённая аналитика и масштабирование)
	•	Дашборды: графики посещений, динамика доходов.
	•	Интеграция с BI или внутренними отчётами.
	•	Подготовка к масштабированию (Redis для слотов, очередь задач для уведомлений).
	•	Внешние интеграции (приём платежей, онлайн-оплата — опц.).

⸻

Спринт 9 (UX/UI refinement)
	•	Полный Apple-style дизайн: шрифты, иконки, анимации.
	•	Улучшение навигации (bottom tabs, large titles).
	•	A/B тесты интерфейса.
	•	Тюнинг производительности (кэширование, SSR статики).

⸻

Спринт 10 (Финализация)
	•	Расширенные отчёты (доходы, кампании, эффективность).
	•	Полная документация коду и API.
	•	Тестирование, безопасность, нагрузочные тесты.
	•	Подготовка к релизу (CI/CD, авто-деплой).


Теперь нам нужно добавить возможность запуска из телеграм. 
Админка по команде /admin,  /client https://beautyminiappappointments-production.up.railway.app/
/health - страница со статусами, состоянием, списком файлов и их размером


Что видно на скриншотах
	1.	Клиенты (скрин 1)

	•	Вкладки «Услуги / Клиент».
	•	Поиск по клиентам.
	•	Кнопка «Создать нового клиента».
	•	Пустой список (нужна таблица/карточки клиентов).

	2.	Календарь/Расписание (скрин 2)

	•	Переключатели «День / Неделя / Месяц / Список».
	•	Лента дат.
	•	Пустая сетка от 10:00 до 17:00.
	•	Плавающая кнопка «+» для создания записи/слота.

	3.	Карточка услуги (скрин 3)

	•	Название, описание.
	•	Категория (группа услуг).
	•	Стоимость (возможно «от»).
	•	Продолжительность (например «2 ч»).
	•	Перерыв после записи.
	•	Переключатель «Доступна онлайн».

Какой функционал нужен менеджеру

Минимум (MVP):
	•	Просмотр и поиск клиентов.
	•	Создание/редактирование клиента.
	•	Создание записи через календарь (выбор клиента → услуга → мастер → дата/время).
	•	Ручное добавление «перерывов/блокировок» в календаре.
	•	Просмотр/редактирование услуг (цена, длительность, «перерыв после», доступность онлайн).
	•	Смена статуса записи: «новая → подтверждена → выполнена/отменена».
	•	Уведомления клиенту в Telegram при подтверждении/отмене.

Следом (Nice-to-have):
	•	Фильтры по мастерам/залам.
	•	Массовая загрузка клиентов (csv).
	•	История визитов клиента и заметки.
	•	Быстрые слоты (шаблоны длительности/перерывов).
	•	Напоминания клиентам (за сутки/за 2 часа).
	•	Статистика (загрузка по мастерам, топ-услуги).

Предлагаю отдельную веб-часть: /manager

Тёмная тема по умолчанию, 3 вкладки вверху:
	1.	Записи
	•	Переключатели: День / Неделя / Месяц / Список.
	•	Фильтры: мастер, услуга, статус.
	•	FAB «+»: модалка «Новая запись» (клиент → услуга → мастер → слот).
	•	Долгое нажатие/контекст: «перенести», «отменить», «заблокировать время».
	2.	Клиенты
	•	Поиск + список.
	•	Карточка клиента: имя, телефоны, TG, заметки, история визитов.
	•	Кнопка «Создать нового клиента».
	3.	Услуги
	•	Список услуг с быстрым поиском.
	•	Редактор: название, описание, категория (группа), цена («от»), длительность, перерыв после записи, «доступна онлайн».
	•	Привязка к мастерам (кто умеет).

Роли и доступ
	•	Роль manager: доступ к /manager, к данным клиентов/записей/услуг, но без системных настроек.
	•	Авторизация: как и обсуждали — через Telegram WebApp SSO (рекомендовано) или маг-ссылка/OTP (как fallback).
	•	Привязка ролей: admins.json → расширим до users.json с полем role: 'owner'|'admin'|'manager'.

Что нужно сделать в коде (план работ)

Этап 1. База (1–2 итерации)
	•	[FE] Новая страница /manager (SPA, тёмная тема).
	•	Верхняя навигация: Записи / Клиенты / Услуги.
	•	Инициализация через ensureTgAuth() (cookie tg_id).
	•	[BE] Роли:
	•	Новый файл users.json (или расширить admins.json) с ролями.
	•	Хелпер ensureRole(ctx, ['manager','admin','owner']).
	•	[BE] API для клиентов:
	•	GET /api/clients?query= (поиск), POST /api/clients, PATCH /api/clients/:id, DELETE /api/clients/:id.
	•	Данные синхронизируем с contacts.json (расширяем модель).
	•	[BE] Ленивая пагинация: limit, cursor для списков.

Этап 2. Календарь менеджера
	•	[FE] Вкладка «Записи»:
	•	Переключатели «День/Неделя/Месяц/Список».
	•	Отрисовка сетки и событий (по мастеру/всем мастерам).
	•	FAB «+»: модалка «Новая запись».
	•	[BE] API для бронирований расширить:
	•	GET /api/bookings?from=&to=&masterId=&status=
	•	POST /api/bookings (уже есть) — позволяй создавать и «без Telegram» (онлайн выключено).
	•	PATCH /api/bookings/:id (перенос, изменение статуса).
	•	POST /api/bookings/:id/confirm (уже добавили) — шлёт клиенту детали.
	•	POST /api/blocks — «блокировка времени» (нет клиента/услуги, только интервал и мастер).
	•	[BE] Слоты/доступность:
	•	Доразвести правило «перерыв после услуги» в /api/availability и при создании записей.

Этап 3. Клиенты
	•	[FE] Вкладка «Клиенты»:
	•	Поиск с подсветкой, список, карточка клиента, «создать нового».
	•	Поля: имя, телефон, tg_id (если известен), заметки, теги.
	•	История визитов (лента последних бронирований).
	•	[BE] Индексация contacts.json + миграция:
	•	Если в contacts.json нет нужных полей — добавляем при первом запуске.

Этап 4. Услуги
	•	[FE] Вкладка «Услуги»:
	•	Список + карточка/редактор (как на 3-м скрине).
	•	Поля: name, description, groupId, price, priceFrom, duration, breakAfter, onlineEnabled.
	•	[BE] API для услуг:
	•	GET /api/services (есть), POST, PATCH, DELETE.
	•	Группы услуг GET /api/groups + CRUD.
	•	Привязки «услуга ↔ мастер» (многие-ко-многим): поле serviceIds в мастере.

Этап 5. Уведомления и напоминания
	•	[BE] Подтверждение/отмена — уже шлём клиенту.
	•	Добавить напоминания (фоновая задача/cron):
	•	За сутки и за 2 часа: 🕑 Напоминание о визите ....
	•	[BE] Шаблоны сообщений и локализация (RU/EN).

Модели (кратко)
// contacts.json (клиенты)
{ "id": 123456789, "first_name": "Иван", "last_name": "Иванов", "phone": "+375...", "notes": "", "tags": [], "createdAt": "", "updatedAt": "" }

// bookings.json
{ "id": 1712345678, "clientId": 123456789, "clientName": "Иван", "clientPhone": "...", "serviceId": 1, "serviceName":"Педикюр", "serviceDuration":120, "servicePrice":60, "masterId":"m1", "date":"2025-10-08", "startTime":"10:00", "duration":120, "status":"pending|confirmed|done|canceled", "telegramId":123456789, "createdAt":"", "updatedAt":"" }

// services.json
{ "id": 1, "name":"Педикюр", "description":"...", "groupId": "nails", "price": 60, "priceFrom": false, "duration": 120, "breakAfter": 0, "onlineEnabled": true }

// masters.json
{ "id":"m1","name":"Юлия","serviceIds":[1,3,8],"schedule":{ "type":"weekly","weekly":{"days":[2,3,4]},"day":{"start":"10:00","end":"19:00"} } }

Быстрый чек-лист внедрения
	•	Добавить /manager (страница и роутинг, тёмная тема).
	•	Ввести users.json с ролями, авторизация через WebApp.
	•	CRUD клиентов (на базе contacts.json).
	•	Календарь: ленты «День/Неделя/Месяц/Список», создание/перенос/отмена.
	•	CRUD услуг, «перерыв после», «доступна онлайн».
	•	Блокировки времени.
	•	Напоминания (за день/за 2 часа).
	•	UI-кнопка «Подтвердить» в расписании → POST /api/bookings/:id/confirm.

Если ок с направлением — начну с каркаса /manager (в том же стиле, что client/admin) и API для клиентов.

Я стемлюсь вот к такому виду. Опишу скриншот сверху вниз для того, 
чтобы ты лучше смог сориентироваться в необходимом для меня функционале. 
В самом верху, переключатель видов с группировкой записи на 
день / по неделям / по месяцам / или просто вывод общим списком. 
Сейчас выбран и активен вид на день, ниже как ты можешь видеть
отображаются дни недели их можно покрутить в прошлое и будущее и выбрать
интересующий день. Далее  указана дата которая сейчас выбрана.
В центральной части  лента записи на день согласно графику мастера. 
Плюс (+) Она же плавающая кнопка, позволяет перейти в интерфейс 
самостоятельной записи клиента, но к нему мы вернемся позже, 
нужно просто добавить кнопку, будем называть ее "добавить запись". 
В нижнем блоки разделов Записи - главный и основной вид, его мы только 
что описали, график работы мастера, управление и настройки.  Д
авай сейчас реализуем Записи - главный и основной вид в светлой теме, 
смело удаляй лишний код